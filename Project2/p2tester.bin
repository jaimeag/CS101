#!/bin/bash

NAME=bill

if [[ $(uname) != Linux ]]
 then   cat <<\END-END-END
You must log into the SEASnet Linux server to run this tester.
END-END-END
        exit 1
fi

GXX='/usr/bin/g++ -std=c++11'

if [ ! -r $NAME.cpp ]
 then	echo "Your current directory is $PWD"
	echo "There is no readable file in this directory named $NAME.cpp"
	echo "Here's what's in this directory:"
	ls
	exit 1
fi

TESTNAME=test$NAME$$
{ tr -d '\015\377\376\357\273\277' < $NAME.cpp ; echo '' ; } > $TESTNAME.cpp

trap 'rm -f $TESTNAME*' EXIT HUP INT TERM

if ! $GXX -o /dev/null $TESTNAME.cpp > ${TESTNAME}errs 2>&1
 then	cat <<\END-END-END
Your program failed to build, so it would earn no correctness points; here are
the error messages:
END-END-END
	sed "s/$TESTNAME/$NAME/" ${TESTNAME}errs
	exit 1
fi

sed 's/\<main[ 	]*([^)]*)/testmain()/' $TESTNAME.cpp > $TESTNAME.cpp2
mv $TESTNAME.cpp2 $TESTNAME.cpp
cat <<\END-END-END >> $TESTNAME.cpp
#include <iostream>
#include <sstream>
#include <streambuf>
#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <csignal>
#include <string>
#include <unistd.h>
using namespace std;

class EchoInputStreambuf : public streambuf
{
  public:
        EchoInputStreambuf()
        {
                // allow 4 chars of pushback
                setg(buffer+4, buffer+4, buffer+4);
        }

  private:
        enum { buffersize = 10000 };
        char buffer[buffersize];

        virtual int underflow()
        {
                if (gptr() < egptr())
                        return *gptr();
                int numPutback = gptr() - eback();
                if (numPutback > 4)
                        numPutback = 4;
		copy(gptr()-numPutback, gptr(), buffer+(4-numPutback));
                char_type* p = buffer+4;
                for (int nleft = buffersize-4; nleft > 0; nleft--)
                {
			int ch = getchar();
                        if (ch == EOF)
                                return EOF;
                        *p++ = ch;
                        cout.rdbuf()->sputc(ch);
                        if (ch == '\n')
                                break;
                }
                setg(buffer+(4-numPutback), buffer+4, p);
                return *gptr();
        }
};

class StreambufSetter
{
    public:
	StreambufSetter(ios& str, streambuf* sb)
	 : stream(str), oldsb(str.rdbuf(sb))
	{}
	~StreambufSetter() { stream.rdbuf(oldsb); }
    private:
	ios& stream;
	streambuf* oldsb;
};

class Timeout {};

void onalarm(int)
{
	throw Timeout();
}

int main(int argc, char* argv[])
{
	if (argc != 2)
	{
		cout << "Tester has missing or too many arguments" << endl;
		return 1;
	}

	ostringstream oss;
	try
	{
		EchoInputStreambuf sb;
		StreambufSetter ssin(cin, &sb);
		StreambufSetter ssout(cout, oss.rdbuf());
        	signal(SIGALRM, onalarm);
        	alarm(3);
		testmain();
        	alarm(0);
	}
	catch (const Timeout&)
	{
		cout << "Your program probably went into an infinite loop."
		     << endl;
        	return 1;
	}
	string s = oss.str();
	if (!s.empty()  &&  s[s.size()-1] != '\n')
		s += '\n';
	const string HYPHENS = "---";
	string::size_type p = s.find(HYPHENS);
	if (p == string::npos)
	{
		cout << "You didn't write to cout a line of exactly three hyphens." << endl;
		return 1;
	}
	if (s.substr(p + HYPHENS.size()) != argv[1])
	{
		cout << "After the line of three hyphens, you didn't write to cout *exactly* the "
		     << endl << "following expected line:" << endl << argv[1];
		return 1;
	}
	return 0;
}
END-END-END
if ! $GXX -o $TESTNAME $TESTNAME.cpp > ${TESTNAME}errs2 2>&1
 then	cat <<\END-END-END
Although your program builds successfully by itself, there's something wrong
with it that's causing it to fail to build with our test harness.  Here are
the error messages:
END-END-END
	sed "s/$TESTNAME/tester$NAME/" ${TESTNAME}errs2
	mv $TESTNAME.cpp tester$NAME.cpp
	exit 1
fi

declare -a in=( $'4253\n4359\nFerris Bueller\n9\n'
                $'4253\n4359\nFerris Bueller\n3\n'
	      )
declare -a out=($'The day number must be in the range 1 through 7.\n'
		$'The bill for Ferris Bueller is $529.66\n'
	       )

allpassed=y
for (( n=0 ;  n < ${#in[@]} ; n++ ))
 do	if (( n > 0 ))
	 then	echo ''
	fi
	echo "========== TEST #$((n+1)) input =========="
	echo -n "${in[n]}"
	echo -n "========== TEST #$((n+1)) "
	(echo -n "${in[n]}" |
			./$TESTNAME "${out[n]}" > ${TESTNAME}out) 2> /dev/null
	status=$?
	if (( status == 0 ))
	 then	echo "PASSED =========="
	 else	echo "FAILED!!! ======="
		allpassed=n
		if (( status < 128 ))
		 then	cat ${TESTNAME}out
		 else	echo "Your program crashed because it did something with undefined behavior."
		fi
	fi
 done
echo ''
echo "=============== SUMMARY ============"
if [[ $allpassed = y ]]
 then	cat <<\END-END-END
Although these tests are by no means complete, your passing them means you
probably didn't make a systematic mistake that would cause you to lose most
of the correctness points.
END-END-END
 else	cat <<\END-END-END
If you turn in your program as is, you will probably lose most of the
correctness points.
END-END-END
fi
